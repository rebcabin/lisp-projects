#+TITLE: Storeys
#+AUTHOR: Brian Beckman
#+DATE: <2016-02-21 Sun>
#+EMAIL: bbeckman@34363bc84acc.ant.amazon.com
#+OPTIONS: ':t *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:comment d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil stat:t tags:t tasks:t tex:t timestamp:t toc:t
#+OPTIONS: todo:t |:t
#+CREATOR: Emacs 24.5.1 (Org mode 8.2.10)
#+SELECT_TAGS: export
#+STARTUP: indent
#+LaTeX_CLASS_OPTIONS: [10pt,oneside,x11names]
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \usepackage{palatino}
#+LaTeX_HEADER: \usepackage{siunitx}
#+LaTeX_HEADER: \usepackage{braket}
#+LaTeX_HEADER: \usepackage[euler-digits,euler-hat-accent]{eulervm}
#+OPTIONS: toc:2

* Prelude

#+NAME: copyright
#+BEGIN_SRC lisp :eval never
  ;; Copyright (c) 2016 Brian Beckman
#+END_SRC

``Storeys'' is a pun on ``story'' and the levels of a dungeon. We avoid the word
``level'' because it's ambiguous between the level of advancement of a character
and the level or storey of the dungeon.

* COMMENT How to Work with This File

** Emacs + VIM == Spacemacs

You must use Emacs, org-mode, and org-babel to work with this file. If you
prefer VIM, I have a solution for you.

** Spacemacs

Spacemacs[fn:spacemacs] is a good set of packages for Emacs even if you're not
going to use its perfect VIM emulation. I recommend it. If you're a VIM user,
you will probably need it because the default Emacs keymaps will drive you
batty.

You can definitely do everything here using just plain-ol'-Emacs, though you may
have to load some packages. If you're using plain-ol'-Emacs, you'll have to
figure that all out on your own; if you're using Spacemacs, almost all the
packages are pre-installed. I won't say any more about it, because I don't want
this to become a paper about Emacs.

** Interactively

Assuming you're visiting this =.org= file in Spacemacs, go to each code block,
read it (you, as a human, read it, input it /via/ your eyeballs into your
brain). Then type =C-c C-c= to /evaluate/ the block.

Most of the code blocks contain just definitions and do not produce results;
such block are marked =:results none=.  Some blocks produce results and Emacs
puts the results into the file you're looking at now.

The first time through, evaluate the blocks in order of appearance so that you
evaluate definition blocks before blocks that use the definitions. This builds
up session state. After that, you should be able to repeatedly evaluate
blocks and get the same results (the code is supposed to be /idempotent/ and
/commutative/ except for def-ref-order dependency).

If you do not get repeatable results, the code is either not idempotent or not
commutative (or both). That's a bug, and here is how to diagnose it: quit the
Inferior Lisp Process (switch to its buffer named something-=*repl*=.)

Repeatedly: track down causes of non-repeatable behavior and fix them. Rarely,
Spacemacs gets confused and you must quit it altogether and restart. Do that if
your results persistently don't make sense.

** TODO Batch
1. Tangle the embedded source out to external files (=C-c C-v t=)
2. Open a terminal window and type =sbcl --script storeys.lisp= or =sbcl
   --script test.lisp=.

** Typesetting 

Export and typeset the PDF file (=M-x org-latex-export-to-pdf=). That
automatically runs all the code again, stressing idempotency.

* COMMENT Preliminaries

This section is just about setting up org-mode. It shouldn't export to the
typeset PDF and HTML.

#+BEGIN_SRC emacs-lisp :exports results :results none
  (defun update-equation-tag ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((count 1))
        (while (re-search-forward "\\tag{\\([0-9]+\\)}" nil t)
          (replace-match (format "%d" count) nil nil nil 1)
          (setq count (1+ count))))))
  (update-equation-tag)
  (setq org-confirm-babel-evaluate nil)
  (org-babel-map-src-blocks nil (org-babel-remove-result))
  (slime)
#+END_SRC

#+BEGIN_SRC lisp
(load "~/quicklisp/setup.lisp")
#+END_SRC

#+BEGIN_SRC lisp
(ql:quickload :cl-quickcheck)
#+END_SRC

#+BEGIN_SRC lisp :results output
(let ((*random-state* (make-random-state t))
      (*print-length* 6)
      (*load-verbose* t))

  (shadow 'cl-quickcheck:report '#:cl-user)
  (use-package :cl-quickcheck)

  (load "test/point.lisp")
  (load "test/box.lisp")
  (load "test/world.lisp")
  (load "test/storey.lisp")
  (load "test/room.lisp")
  (load "test/rendering.lisp")
  )
#+END_SRC

* Project Structure

** Brute-Force Loads

The current system structure is just a sequence of load commands. Dependencies
of one facility on another is expressed only implicitly by the sequence of those
loads, and only in top-level, runnable lisp files. For example, /box/ depends on
/point/, but =box.lisp= doesn't load =point.lisp=. Instead, any file that wants
to use /box/ must load =point.lisp= before loading =box.lisp=. =box.lisp=
/could/ load =point.lisp=, but then =point.lisp= would be loaded more than once.
Harmless but inefficient. If =box.lisp= doesn't load =point.lisp=, then
=box.lisp= can't stand alone. That's the decision we made:

*/Facilities are not typically standalone, and their dependencies are implicit in the sequence of load commands./*

Currently, there are two contexts in which this brute-force loading goes on:
1. any main code, such as =charms-test-5.lisp=
2. quickcheck code, like =test.lisp=

For example, in one intermediate version, =charms-test-5.lisp= loaded files in
this order:
#+BEGIN_SRC lisp 
(load "point.lisp")
(load "box.lisp")
(load "glyph.lisp")
(load "world.lisp")
(load "storey.lisp")
(load "room.lisp")
(load "rendering.lisp")
#+END_SRC

#+RESULTS:
: T

The convention for quickcheck code is a little more subtle: it will load
unit-test files out of the =test= directory in the same order as a main file
does. For instance, the version of =test.lisp= corresponding to the version of
=charms-test-5.lisp= noted above looks like this:

#+BEGIN_SRC lisp
(load "~/quicklisp/setup.lisp")
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp
(ql:quickload :cl-quickcheck)
(ql:quickload :defenum)
(ql:quickload :alexandria)
(ql:quickload :hash-set)
#+END_SRC

#+RESULTS:
| :HASH-SET |

#+BEGIN_SRC lisp
(let ((*random-state* (make-random-state t))
      (*print-length* 6)
      (*load-verbose* t))

  (shadow 'cl-quickcheck:report '#:cl-user)
  (shadow 'defenum:enum         '#:cl-user)
  (use-package :cl-quickcheck)
  (use-package :defenum)

  ;; This sequence of 'load' expressions should parallel the 'load's at the head
  ;; of any main like 'charms-test-5.lisp'.

  (load "test/point.lisp")
  (load "test/box.lisp")
  (load "test/glyph.lisp")
  (load "test/geo.lisp")
  (load "test/world.lisp")
  (load "test/storey.lisp")
  (load "test/room.lisp")
  (load "test/rendering.lisp")
  )
#+END_SRC

#+RESULTS:
: T

No doubt, you've deduced that main codes and test codes --- anything that runs
facilityy code --- must also load /quickload/ and any quickload dependencies
like /alexandria/.  Just as with our own facilities, you must do this by brute
force. 

Each file in the test directory must load its brother from the top-level
directory. For example, =test/glyph.lisp= looks like this:

#+BEGIN_SRC lisp
(load "glyph.lisp")

(quickcheck
 (is= 42 42))
#+END_SRC

#+RESULTS:
: T

Because we run =test.lisp= from the top level, =test/glyph.lisp= will load the
top-level =glyph.lisp=. Of course, =test/glyph.lisp= must load any of its
dependencies. It doesn't have any in the version we're talking about, so
everything is fine. But =test/box.lisp= needs top-level =point.lisp=. So
=test/box.lisp= looks like this:

#+BEGIN_SRC lisp
(load "point.lisp")
(load "box.lisp")

;;; blah blah blah

(quickcheck
 (is= 42 42))
#+END_SRC

#+RESULTS:
: T

All this is cumbersome and brittle, so we will fix it with something like ASDF
later.

** TODO ASDF

* Basics
** Point
** Box
** Glyph
* Storeys

** World

The world has a sequence of /storeys/. There is a first one, but not a last one.

#+BEGIN_SRC lisp :tangle world.lisp
(defclass world ()
  ((storeys :accessor world-storeys :initform () :initarg :storeys)))
#+END_SRC

** Storey

A storey has a matrix of /tiles/. 
It's likely that we will change the representation of a story to 
a sparse matrix in the future, so abstracting its representation
is worthwhile prophylaxis (future-proofing).

The coordinate system of any storey has origin $(0, 0)$ so that array indices
and tile coordinates are always identical.

#+BEGIN_SRC lisp :tangle storey.lisp
  (defconstant +storey-width+  256)
  (defconstant +storey-height+ 256)

  (defun make-storey (&key (width +storey-width+)
                        (height +storey-height+))
    (make-array `(,height ,width)
                :initial-element nil))

  (let ((m (make-storey :width 10 :height 6)))
    (setf (aref m 2 1) :hi)
    m)
#+END_SRC

#+RESULTS:
: #2A((NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL :HI NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL))

** Tile

Each tile contains exactly one (possible nil)
/geo/, zero or one /critters/, and a bag of /treasures/. We allow nil geos
because most tiles will have nothing interesting in them. A nil tile means the
same as a nil geo in a non-nil tile.

#+BEGIN_SRC lisp :tangle tile.lisp
  (defclass tile ()
    ((geo       :accessor tile-geo       :initform nil :initarg :geo)
     (critter   :accessor tile-critter   :initform nil :initarg :critter)
     (treasures :accessor tile-treasures :initform nil :initarg :treasures)
     (lighted   :accessor tile-lighted   :initform nil :initarg :lighted
    )))

    (let ((m (make-storey :width 10 :height 6)))
      (setf (aref m 2 1)
            (make-instance 'tile))
      m)
#+END_SRC

#+RESULTS:
: #2A((NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL #<TILE {1002B2EE93}> NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
:     (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL))

** Room

A /room/ is a rectangular region of tiles in a storey. It has a reference to its
storey and a reference to a box specifying the top and left coordinates of the
room with respect to the storey's origin $(0,0)$, and a width and height.

#+BEGIN_SRC lisp :tangle geobox.lisp

#+END_SRC

** Geo

A geo could be nil, meaning ``nothing interesting here,'' or a wall, door, rock, or trap.

#+BEGIN_SRC lisp :tangle geo.lisp
(defclass geo ()
  ((kind :accessor geo-kind :initform nil :initarg :kind)))
#+END_SRC

*** Wall
**** Inscribed
*** Door
**** Open
**** Closed
**** Locked
**** Spiked
**** Broken
*** Rock
**** Granite
**** Quartz
**** Magma
**** Lava
*** Trap
**** Gas
***** Poison
***** Drug
***** Blindness
***** Fear
**** DimMak
**** Dart
***** Poison
***** Drug
**** Fire
**** Boulder
**** Flood
**** Curse
**** Ice
**** Immoblization
**** Lightning
**** Pit
**** Hole
**** Teleport
** Critter
*** Me
*** Monster
** Treasure
*** Potion
*** Scroll
*** Armor
*** Weapon

* Rendering

** Screen
** Window
** Scroll-state

* Me

** Attributes
*** Dynamic
**** HitPoints
**** Mana
**** Energy
**** Rage
**** Focus
*** Static
**** Strength
**** Wisdom
**** Constitution
**** Stamina
**** Intellect
**** Charisma
**** Agility
**** Dexterity
**** Versatility
**** Mastery
** Classes
** Races
* Treasures
** Armor
*** Head
*** Shoulders
*** Chest
*** Arms
*** Wrists
*** Hands
*** Pants
*** Feet
*** Neck
*** Trinkets
*** Rings
** Weapons
*** One-Handers
**** Swords
**** Daggers
**** Maces
**** Clubs
**** Fists
*** Two-Handers
**** Staves
**** Swords
**** Maces
**** Clubs
*** Ranged
**** Guns
**** Bows
**** Crossbows
** 
* Players
** AI
** Bots
